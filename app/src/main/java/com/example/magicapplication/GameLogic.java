package com.example.magicapplication;import java.util.ArrayList;public class GameLogic {    private ArrayList<Player> players;    private Player activePlayer;    private ArrayList<String> roundPhases;    private String round;    private ArrayList<Creature> player1Creatures;    private ArrayList<Creature> player2Creatures;    private ArrayList<Creature> activeAttackers;    private ArrayList<Creature> activeBlockers;    public GameLogic(Player player1, Player player2){        this.players = new ArrayList<Player>();        this.players.add(player1);        this.players.add(player2);        this.roundPhases = new ArrayList<String>();        this.roundPhases.add("Main");        this.roundPhases.add("Attack");        this.roundPhases.add("Block");        this.roundPhases.add("Damage");        this.roundPhases.add("End");        this.roundPhases.add("Swap");        this.player1Creatures = new ArrayList<Creature>();        this.player2Creatures = new ArrayList<Creature>();        this.activeAttackers = new ArrayList<Creature>();        this.activeBlockers = new ArrayList<Creature>();        this.activePlayer = player1;        this.setRound(0);    }    public boolean hasPlayedLand(){        return this.activePlayer.getHasPlayedLand();    }    public Player getActivePlayer(){        return this.activePlayer;    }    public void setActivePlayer(int index){        this.activePlayer = this.players.get(index);    }    public void nextPlayer(){        if (this.activePlayer == players.get(0) ){            this.setActivePlayer(1);        }        else if (this.activePlayer == players.get(1) ){            this.setActivePlayer(0);        }    }    public String getRound() {        return this.round;    }    public void setRound(int index) {        this.round = this.roundPhases.get(index);;    }    public void nextRound(){        int index = this.roundPhases.indexOf(this.round);        index += 1;        if (index < 6){            this.setRound(index);        } else if (index == 6 ){            this.setRound(0);        }    }    public ArrayList<Card> playableCards(Player player){        ArrayList<Card> playableHand = new ArrayList<Card>();        for (Card card : player.getHand() ){            if (!player.getHasPlayedLand() && card instanceof Land) {                playableHand.add(card);            } else if (card.getCost() <= player.getUntappedLandSize() && !(card instanceof Land) ) {                playableHand.add(card);            }        }        return playableHand;    }    public void removeCardFromHand(Card card, Player player){        int index = player.getHand().indexOf(card);        player.getHand().remove(index);    }    public void playCard(Card card, Player player){        if (card instanceof Land){            player.playLand( (Land) card);            this.removeCardFromHand(card, player);        } else if (card instanceof Creature){            this.removeCardFromHand(card, player);            for (int i = 0; i < card.getCost() ; i++){                player.getUntappedLand().get(i).setTapped(true);            }        }    }    public ArrayList<Creature> getPlayer1Creatures() {        return this.player1Creatures;    }    public void addPlayer1Creatures(Card creature) {        this.player1Creatures.add( (Creature) creature );    }    public void removePlayer1Creatures(Card creature) {        this.player1Creatures.remove(creature );    }    public ArrayList<Creature> getPlayer2Creatures() {        return this.player2Creatures;    }    public void addPlayer2Creatures(Card creature) {        this.player2Creatures.add( (Creature) creature );    }    public void removePlayer2Creatures(Card creature) {        this.player2Creatures.remove(creature);    }    public void addCreatureToBattleField(Creature creature, Player player){        if(player == this.players.get(0) ){            this.player1Creatures.add(creature);        } else if (player == this.players.get(1) ) {            this.player2Creatures.add(creature);        }    }}